name: Production Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options: ['major', 'minor', 'patch', 'rc']
      force-rebuild:
        description: 'Force clean rebuild'
        required: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYPI_REPO: https://upload.pypi.org/legacy/
  SIGNING_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
  SLSA_PROVENANCE: true

jobs:
  versioning:
    name: Semantic Version Management
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.semver.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Generate Semantic Version
        id: semver
        uses: docker://ghcr.io/fsaintjacques/semver-tool:3.4.0
        with:
          args: |
            current-version=$(git describe --tags --abbrev=0)
            bump-${{ inputs.release-type }} $current-version

  build-matrix:
    name: Multi-Architecture Build
    runs-on: ubuntu-latest
    needs: versioning
    strategy:
      matrix:
        arch: [amd64, arm64]
        os: [linux, windows]
      max-parallel: 4
    steps:
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:master

      - name: Cross-Platform Build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.os }}/${{ matrix.arch }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.versioning.outputs.semver }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            RELEASE_VERSION=${{ needs.versioning.outputs.semver }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: ${{ env.SLSA_PROVENANCE }}

  security-scan:
    name: Production Security Gate
    runs-on: ubuntu-latest
    needs: build-matrix
    timeout-minutes: 30
    steps:
      - name: Critical Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.versioning.outputs.semver }}
          severity: CRITICAL
          exit-code: 1
          format: sarif
          ignore-unfixed: true

      - name: Sign Container Image
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'
          args: |
            sign --key ${{ env.SIGNING_KEY }} 
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.versioning.outputs.semver }}

  package-publish:
    name: Multi-Repository Publication
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        registry: ['ghcr', 'dockerhub', 'aws-ecr']
      fail-fast: false
    steps:
      - name: Authenticate to ${{ matrix.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry == 'dockerhub' && 'index.docker.io' || matrix.registry }}
          username: ${{ secrets[format('{0}_USER', upper(matrix.registry))] }}
          password: ${{ secrets[format('{0}_TOKEN', upper(matrix.registry))] }}

      - name: Push Container Image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{ matrix.registry == 'ghcr' && format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, needs.versioning.outputs.semver) || format('{0}/{1}:{2}', matrix.registry, env.IMAGE_NAME, needs.versioning.outputs.semver) }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ matrix.registry == 'ghcr' && format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, needs.versioning.outputs.semver) || format('{0}/{1}:{2}', matrix.registry, env.IMAGE_NAME, needs.versioning.outputs.semver) }}
          format: spdx-json

      - name: Upload to Package Registry
        if: matrix.registry == 'ghcr'
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.registry }}
          path: ./sbom.spdx.json

  pypi-release:
    name: Python Package Deployment
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build Wheel
        run: |
          python -m pip install --upgrade build
          python -m build --wheel
          echo "TWINE_USERNAME=__token__" >> $GITHUB_ENV
          echo "TWINE_PASSWORD=${{ secrets.PYPI_TOKEN }}" >> $GITHUB_ENV

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          repository-url: ${{ env.PYPI_REPO }}
          verify-metadata: true

  changelog-generation:
    name: Release Documentation
    runs-on: ubuntu-latest
    needs: [versioning, package-publish]
    steps:
      - name: Generate Changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configuration: |
            template: |
              # Changelog
              {% for category in categories %}
              ### {{ category.title }}
              {% for commit in category.commits %}
              - {{ commit.message }}
              {% endfor %}
              {% endfor %}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Notes
        uses: softprops/action-gh-release@v1
        with:
          tag: ${{ needs.versioning.outputs.semver }}
          name: Release ${{ needs.versioning.outputs.semver }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ contains(needs.versioning.outputs.semver, 'rc') }}
          discussion_category_name: "Announcements"

  post-release:
    name: Post-Release Operations
    runs-on: ubuntu-latest
    needs: [pypi-release, changelog-generation]
    if: always()
    steps:
      - name: Update Deployment Tracker
        uses: actions/github-script@v7
        env:
          VERSION: ${{ needs.versioning.outputs.semver }}
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Release ${{ env.VERSION }} deployed successfully!`
            })

      - name: Clean Build Artifacts
        run: |
          docker system prune -af
          rm -rf dist/ build/

      - name: Notify Slack
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_RELEASE_WEBHOOK }}
          SLACK_MESSAGE: "Successfully released version ${{ needs.versioning.outputs.semver }}"
          SLACK_TITLE: "Release Complete"
          SLACK_COLOR: "good"

      - name: Failure Notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_ALERT_WEBHOOK }}
          SLACK_MESSAGE: "Release ${{ needs.versioning.outputs.semver }} failed!"
          SLACK_TITLE: "Release Error"
          SLACK_COLOR: "danger"
