name: PR Validation Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'pyproject.toml'

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.7.0'
  DOCKER_BUILDKIT: 1
  KUBERNETES_VERSION: '1.28.2'

jobs:
  code-quality:
    name: Static Analysis & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        run: poetry install --no-root --with dev,security

      - name: Run code style checks
        run: |
          poetry run black --check --diff src tests
          poetry run isort --check-only src tests
          poetry run flake8 src tests --max-line-length=120

      - name: Security scanning
        run: |
          poetry run bandit -r src -c pyproject.toml
          poetry run semgrep --config=auto --metrics=off --error

      - name: Upload code quality report
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-report
          path: |
            semgrep.sarif
            bandit.json

  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: ['3.10', '3.11']
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache test environments
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-test-${{ hashFiles('pyproject.toml') }}

      - name: Run unit tests
        run: |
          poetry install --with test
          poetry run pytest tests/unit \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python }}
          path: |
            test-results.xml
            coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile') }}

      - name: Run integration tests
        run: |
          docker build -t enliven-agent-test .
          docker run --network host \
            -e DB_HOST=localhost \
            -e REDIS_URL=redis://localhost:6379 \
            enliven-agent-test \
            pytest tests/integration -v

  dependency-check:
    name: Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Run OSS audit
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          exit-code: 0
          format: 'table'
          severity: 'CRITICAL,HIGH'
          input: 'pyproject.toml'

      - name: Check for outdated dependencies
        run: poetry show --outdated

      - name: Update SBOM
        uses: cyclonedx/gh-action@v1
        with:
          output: bom.xml

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-report
          path: bom.xml

  report:
    name: Summary Report
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - unit-tests
      - integration-tests
      - dependency-check
    if: always()
    steps:
      - name: Code Quality Status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: codeQuality } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            console.log('Code Quality Artifacts:', codeQuality.artifacts);

      - name: Test Summary
        uses: test-summary-action@v2
        with:
          paths: '**/test-results.xml'

      - name: Post SonarCloud analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
